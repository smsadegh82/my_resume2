{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\UX410UF\\\\Desktop\\\\reactjs-portfolio-master\\\\src\\\\component\\\\ThemeSwitcher\\\\ThemeSwitcher.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getThemes } from './themes';\n\nclass ThemeSwitcher extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getRandomTheme = () => {\n      const currentTheme = this.state.theme;\n      const allThemes = getThemes();\n      const themesWithoutCurrentTheme = allThemes.filter(theme => theme.name !== currentTheme.name);\n      const randomThemeIndex = Math.floor(Math.random() * themesWithoutCurrentTheme.length);\n      return themesWithoutCurrentTheme[randomThemeIndex];\n    };\n\n    this.switchTheme = () => {\n      const randomTheme = this.getRandomTheme();\n      this.setState({\n        theme: randomTheme\n      });\n    };\n\n    const _allThemes = getThemes();\n\n    const firstTimeThemes = _allThemes.filter(theme => theme.firstTime === true);\n\n    this.state = {\n      theme: firstTimeThemes[Math.floor(Math.random() * firstTimeThemes.length)]\n    };\n    this.switchTheme = this.switchTheme.bind(this);\n  }\n\n  getChildContext() {\n    return {\n      theme: this.state.theme,\n      switchTheme: this.switchTheme\n    };\n  }\n\n  render() {\n    const children = this.props.children;\n    const theme = this.state.theme;\n    return React.createElement(\"div\", {\n      className: \"theme-switcher\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"style\", {\n      jsx: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"\\n          body {\\n            background-color: \".concat(theme.bgPrimary, \";\\n            body, h1, h2, h3, h4, h5, h6, p, ol, ul {\\n              color: \").concat(theme.textPrimary, \"\\n            }\\n          }\\n        \")), children);\n  }\n\n}\n\nThemeSwitcher.propTypes = {\n  children: PropTypes.node\n};\nThemeSwitcher.childContextTypes = {\n  theme: PropTypes.any,\n  switchTheme: PropTypes.func\n};\nexport default ThemeSwitcher;","map":{"version":3,"sources":["C:\\Users\\UX410UF\\Desktop\\reactjs-portfolio-master\\src\\component\\ThemeSwitcher\\ThemeSwitcher.js"],"names":["React","Component","PropTypes","getThemes","ThemeSwitcher","constructor","props","getRandomTheme","currentTheme","state","theme","allThemes","themesWithoutCurrentTheme","filter","name","randomThemeIndex","Math","floor","random","length","switchTheme","randomTheme","setState","firstTimeThemes","firstTime","bind","getChildContext","render","children","bgPrimary","textPrimary","propTypes","node","childContextTypes","any","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,SAAT,QAA0B,UAA1B;;AAEA,MAAMC,aAAN,SAA4BH,SAA5B,CAAsC;AAEpCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAmBnBC,cAnBmB,GAmBF,MAAM;AACrB,YAAMC,YAAY,GAAG,KAAKC,KAAL,CAAWC,KAAhC;AACA,YAAMC,SAAS,GAAGR,SAAS,EAA3B;AACA,YAAMS,yBAAyB,GAAGD,SAAS,CAACE,MAAV,CAChCH,KAAK,IAAIA,KAAK,CAACI,IAAN,KAAeN,YAAY,CAACM,IADL,CAAlC;AAGA,YAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CACtBD,IAAI,CAACE,MAAL,KAAiBN,yBAAyB,CAACO,MADrB,CAAzB;AAGA,aAAOP,yBAAyB,CAACG,gBAAD,CAAhC;AACD,KA7BkB;;AAAA,SA+BnBK,WA/BmB,GA+BL,MAAM;AAClB,YAAMC,WAAW,GAAG,KAAKd,cAAL,EAApB;AACA,WAAKe,QAAL,CAAc;AACZZ,QAAAA,KAAK,EAAEW;AADK,OAAd;AAGD,KApCkB;;AAEjB,UAAMV,UAAS,GAAGR,SAAS,EAA3B;;AACA,UAAMoB,eAAe,GAAGZ,UAAS,CAACE,MAAV,CAAiBH,KAAK,IAAIA,KAAK,CAACc,SAAN,KAAoB,IAA9C,CAAxB;;AAEA,SAAKf,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAEa,eAAe,CAACP,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAiBK,eAAe,CAACJ,MAA7C,CAAD;AADX,KAAb;AAIA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBK,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO;AACLhB,MAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KADb;AAELU,MAAAA,WAAW,EAAE,KAAKA;AAFb,KAAP;AAID;;AAqBDO,EAAAA,MAAM,GAAG;AAAA,UACCC,QADD,GACc,KAAKtB,KADnB,CACCsB,QADD;AAEP,UAAMlB,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAzB;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,GAAG,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAGwBA,KAAK,CAACmB,SAH9B,4FAKenB,KAAK,CAACoB,WALrB,4CADF,EAWIF,QAXJ,CADF;AAeD;;AA3DmC;;AA8DtCxB,aAAa,CAAC2B,SAAd,GAA0B;AACxBH,EAAAA,QAAQ,EAAE1B,SAAS,CAAC8B;AADI,CAA1B;AAIA5B,aAAa,CAAC6B,iBAAd,GAAkC;AAChCvB,EAAAA,KAAK,EAAER,SAAS,CAACgC,GADe;AAEhCd,EAAAA,WAAW,EAAElB,SAAS,CAACiC;AAFS,CAAlC;AAKA,eAAe/B,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getThemes } from './themes';\n\nclass ThemeSwitcher extends Component {\n\n  constructor(props) {\n    super(props);\n    const allThemes = getThemes();\n    const firstTimeThemes = allThemes.filter(theme => theme.firstTime === true);\n\n    this.state = {\n      theme: firstTimeThemes[Math.floor((Math.random() * (firstTimeThemes.length)))]\n    }\n\n    this.switchTheme = this.switchTheme.bind(this);\n  }\n  \n  getChildContext() {\n    return {\n      theme: this.state.theme,\n      switchTheme: this.switchTheme\n    };\n  }\n\n  getRandomTheme = () => {\n    const currentTheme = this.state.theme;\n    const allThemes = getThemes();\n    const themesWithoutCurrentTheme = allThemes.filter(\n      theme => theme.name !== currentTheme.name\n    );\n    const randomThemeIndex = Math.floor(\n      (Math.random() * (themesWithoutCurrentTheme.length))\n    );\n    return themesWithoutCurrentTheme[randomThemeIndex];\n  }\n\n  switchTheme = () => {\n    const randomTheme = this.getRandomTheme();\n    this.setState({\n      theme: randomTheme\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    const theme = this.state.theme;\n\n    return (\n      <div className=\"theme-switcher\">\n        <style jsx=\"true\">\n        {`\n          body {\n            background-color: ${theme.bgPrimary};\n            body, h1, h2, h3, h4, h5, h6, p, ol, ul {\n              color: ${theme.textPrimary}\n            }\n          }\n        `}\n        </style>\n        { children }\n      </div>\n    );\n  }\n}\n\nThemeSwitcher.propTypes = {\n  children: PropTypes.node\n}\n\nThemeSwitcher.childContextTypes = {\n  theme: PropTypes.any,\n  switchTheme: PropTypes.func\n}\n\nexport default ThemeSwitcher;"]},"metadata":{},"sourceType":"module"}